{
  "name": "My Virtualbox Setup",
  "tagline": "",
  "body": "# VirtualBox\r\n\r\nCreate 3 VMs running Ubuntu server: VM1, VM2, VM3. VM1 is going to be our Gateway, NFS server, and NIS as well. It will be visible to the host OS. Because VM1 is our Gateway it needs two network adapters one that is NAT and the other that is just internal. \r\n\r\nMake sure you have a ssh server running on them. If you didn't do this on install, then run:\r\n<pre>sudo apt-get install openssh-server\r\n</pre>\r\nBecause we've gone with NAT, we'll have to setup port forwarding under networking and then ssh to localhost using the port you specified. For more information: http://stackoverflow.com/questions/5906441/how-to-ssh-to-a-virtualbox-guest-externally-through-a-host\r\n\r\nResources:\r\n* https://www.virtualbox.org/\r\n* www.ubuntu.com\r\n\r\n# Networking\r\n\r\nHere are the last lines in my interfaces file located at /etc/networking/interfaces on vm1:\r\n<pre>auto enp0s3\r\niface enp0s3 inet dhcp\r\n\r\nauto enp0s8\r\niface enp0s8 inet static\r\n        address 192.168.1.1\r\n        broadcast 192.168.1.255\r\n        netmask 255.255.255.0\r\n        network 192.168.137.0\r\n</pre>\r\n\r\nHere are the last lines in my interfaces file located at /etc/networking/interfaces on vm2:\r\n<pre>\r\nauto enp0s8\r\niface enp0s8 inet static\r\n        address 192.168.1.100\r\n        broadcast 192.168.1.255\r\n        netmask 255.255.255.0\r\n        network 192.168.137.0\r\n        gateway 192.168.1.1\r\n        dns-nameservers 8.8.8.8\r\n</pre>\r\n\r\nI also removed apparmor from vm1 because this is a test setup, and I don't want security getting in the way of things at the moment: http://www.techytalk.info/disable-and-remove-apparmor-on-ubuntu-based-linux-distributions/comment-page-1/.\r\n\r\n# NIS\r\nSet up shared login between all virtual machines. I'm going to use vm1 as the nis server. All others are clients.\r\n\r\nhttps://help.ubuntu.com/community/SettingUpNISHowTo\r\n\r\nHere are some details that I used while following the tutorial. Specifically, I had to modify a few things and here are my exact files:\r\n\r\nI called my domain <b>mydomain</b>. And I ran through the install provided by the link, which is what you should do first. But then I had to make some changes to the files.\r\n\r\n### vm1\r\n#### /etc/hosts\r\n<pre>127.0.0.1       localhost\r\n192.168.1.100   vm2\r\n192.168.1.101   vm3\r\n192.168.1.1     vm1\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1     localhost ip6-localhost ip6-loopback\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\n</pre>\r\n\r\n#### rpcbind\r\nrpcbind didn't start on boot for me, which seems like a known bug. To fix, run: <code>sudo systemctl add-wants multi-user.target rpcbind.service</code>. Then reboot.\r\n\r\n#### hosts.allow\r\n<pre>rpcbind ypserv ypbind : 192.168.1.0\r\n</pre>\r\n\r\n#### ypserv.securenets\r\n<pre># Always allow access for localhost\r\n255.0.0.0       127.0.0.0\r\n\r\n# This line gives access to everybody. PLEASE ADJUST!\r\n255.255.255.0 192.168.1.0\r\n</pre>\r\n\r\n#### yp.conf\r\n<pre>domain mydomain server vm1\r\n</pre>\r\n\r\n### vm2\r\n#### yp.conf\r\n<pre>ypserver vm1\r\n</pre>\r\n\r\n#### /etc/hosts\r\n<pre>127.0.0.1       localhost\r\n192.168.1.100   vm2\r\n192.168.1.1     vm1\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1     localhost ip6-localhost ip6-loopback\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters\r\n</pre>\r\n\r\n### What does this give us?\r\nWe can now have shared passwords/usernames/groups! For example, I can now create a hduser and share it with all systems:\r\n\r\n<pre>birg@vm1:~$ sudo adduser hduser\r\nAdding user `hduser' ...\r\nAdding new group `hduser' (1001) ...\r\nAdding new user `hduser' (1001) with group `hduser' ...\r\nCreating home directory `/home/hduser' ...\r\nCopying files from `/etc/skel' ...\r\nEnter new UNIX password:\r\nRetype new UNIX password:\r\npasswd: password updated successfully\r\nChanging the user information for hduser\r\nEnter the new value, or press ENTER for the default\r\n        Full Name []: Hadoop User\r\n        Room Number []:\r\n        Work Phone []:\r\n        Home Phone []:\r\n        Other []:\r\nIs the information correct? [Y/n] Y\r\nbirg@vm1:~$ sudo make -C /var/yp\r\nmake: Entering directory '/var/yp'\r\nmake[1]: Entering directory '/var/yp/mydomain'\r\nUpdating passwd.byname...\r\nUpdating passwd.byuid...\r\nUpdating group.byname...\r\nUpdating group.bygid...\r\nUpdating netid.byname...\r\nUpdating shadow.byname...\r\nmake[1]: Leaving directory '/var/yp/mydomain'\r\nmake: Leaving directory '/var/yp'\r\n</pre>\r\n\r\nI also changed the following line in /etc/nsswitch.conf on vm2 (or on whatever you called your client):\r\n<pre>hosts:          nis files dns\r\n</pre>\r\n\r\n# Gateway\r\nI'm going to setup vm1 as a gateway for my other vms. I following the iptables section of https://help.ubuntu.com/community/Internet/ConnectionSharing.\r\n\r\nOn vm1, I ran:\r\n<pre>sudo iptables -A FORWARD -o enp0s3 -i enp0s8 -s 192.168.1.0/24 -m conntrack --ctstate NEW -j ACCEPT\r\nsudo iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\r\nsudo iptables -t nat -F POSTROUTING\r\nsudo iptables -t nat -A POSTROUTING -o enp0s3 -j MASQUERADE\r\n</pre>\r\n\r\nThen:\r\n<pre>\r\nsudo iptables-save | sudo tee /etc/iptables.sav\r\n</pre>\r\n\r\nThen I added the following to /etc/rc.local:\r\n<pre>\r\niptables-restore < /etc/iptables.sav\r\n</pre>\r\n\r\nI think followed the rest of the ip configuration from the tutorial.\r\n\r\n# NFS\r\nNow we would really like a shared filesystem. I'm going to share the home directory using NFS using this tutorial as a guide:\r\n\r\nhttps://help.ubuntu.com/community/SettingUpNFSHowTo\r\n\r\nMy commands on vm1:\r\n<pre>apt-get install nfs-kernel-server\r\n</pre>\r\n\r\nMy /etc/exports\r\n<pre>/home 192.168.1.0/24(rw,sync,no_root_squash,no_subtree_check)\r\n</pre>\r\n\r\nThen I did the following:\r\n<pre>birg@vm1:~$ sudo exportfs -a\r\nbirg@vm1:~$ sudo exportfs\r\n/home           192.168.1.0/24\r\n</pre>\r\n\r\nOn the client vm (vm2), I then did:\r\n<pre>sudo apt-get update\r\nsudo apt-get install nfs-common\r\n</pre>\r\n\r\nThen in /etc/fstab I added:\r\n<pre>vm1:/home   /home nfs    auto  0  0\r\n</pre>\r\n\r\nThen at the command line, I did:\r\n<pre>sudo mount /home\r\n</pre>\r\n\r\n# SSH keys\r\nI followed: https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2\r\n\r\n# Java\r\nhttp://tipsonubuntu.com/2016/07/31/install-oracle-java-8-9-ubuntu-16-04-linux-mint-18/\r\n\r\n# Important\r\nMake sure you actually use a decent ssh client. For windows, I suggest mobaxterm. For mac, you already have a built-in client. \r\n\r\nYou'll also want to learn a command line editor. I use vim, but others swear by emacs. At the very least try out nano.\r\n\r\nOnce you get the hang of ssh, you can use it to also ftp files using sftp. Again, you'll want a decent client like mobaxterm or something else to copy files on and off.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}